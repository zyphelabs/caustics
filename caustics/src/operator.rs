//! Global logical operators for WhereParam types
//! 
//! This module provides generic `or`, `and`, and `not` functions that work with
//! any WhereParam type generated by the `#[caustics]` macro.

/// Logical OR operator for combining multiple WhereParam conditions
/// 
/// # Example
/// ```rust
/// use caustics::operator;
/// 
/// // Assuming you have a WhereParam type from your entity
/// // let conditions = vec![
/// //     entity::field1::equals("value1"),
/// //     entity::field2::equals("value2"),
/// // ];
/// // let combined = operator::or(conditions);
/// ```
pub fn or<T>(params: Vec<T>) -> T 
where 
    T: IntoOrParam,
{
    T::from_or_params(params)
}

/// Logical AND operator for combining multiple WhereParam conditions
/// 
/// # Example
/// ```rust
/// use caustics::operator;
/// 
/// // Assuming you have a WhereParam type from your entity
/// // let conditions = vec![
/// //     entity::field1::equals("value1"),
/// //     entity::field2::gt(18),
/// // ];
/// // let combined = operator::and(conditions);
/// ```
pub fn and<T>(params: Vec<T>) -> T 
where 
    T: IntoAndParam,
{
    T::from_and_params(params)
}

/// Logical NOT operator for negating WhereParam conditions
/// 
/// # Example
/// ```rust
/// use caustics::operator;
/// 
/// // Assuming you have a WhereParam type from your entity
/// // let conditions = vec![
/// //     entity::field1::equals("value1"),
/// // ];
/// // let negated = operator::not(conditions);
/// ```
pub fn not<T>(params: Vec<T>) -> T 
where 
    T: IntoNotParam,
{
    T::from_not_params(params)
}

/// Trait for types that can be converted to OR operations
pub trait IntoOrParam: Sized {
    fn from_or_params(params: Vec<Self>) -> Self;
}

/// Trait for types that can be converted to AND operations
pub trait IntoAndParam: Sized {
    fn from_and_params(params: Vec<Self>) -> Self;
}

/// Trait for types that can be converted to NOT operations
pub trait IntoNotParam: Sized {
    fn from_not_params(params: Vec<Self>) -> Self;
}